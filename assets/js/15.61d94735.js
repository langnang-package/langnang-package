(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{487:function(v,_,e){"use strict";e.r(_);var o=e(14),r=Object(o.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[v._v("#")]),v._v(" JavaScript")]),v._v(" "),e("h2",{attrs:{id:"algorithm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[v._v("#")]),v._v(" Algorithm")]),v._v(" "),e("h3",{attrs:{id:"sort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[v._v("#")]),v._v(" Sort")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("bubbleSort(numberArray)")]),v._v(" 冒泡排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("bucketSort(numberArray)")]),v._v(" 桶排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("countingSort(numberArray)")]),v._v(" 技术排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("heapSort(numberArray)")]),v._v(" 堆排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("insertionSort(numberArray)")]),v._v(" 插入排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("mergeSort(numberArray)")]),v._v(" 归并排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("quickSort(numberArray)")]),v._v(" 快速排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("radixSort(numberArray)")]),v._v(" 基数排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("selectionSort(numberArray)")]),v._v(" 选择排序")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("shellSort(numberArray)")]),v._v(" 希尔排序")])]),v._v(" "),e("h2",{attrs:{id:"array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[v._v("#")]),v._v(" Array")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.from(arrayLike[, mapFn[, thisArg]])")]),v._v(" 从类数组对象或者可迭代对象中创建一个新的，浅拷贝的数组实例。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.isArray(obj)")]),v._v(" 用来判断某个变量是否是一个数组对象。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.of(element, element, ...[, elementN]]])")]),v._v(" 根据一组参数来创建新的数组实例，支持任意的参数数量和类型。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.copyWithin(target[, start[, end]])")]),v._v(" 在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.fill(value[, start[, end]])")]),v._v(" 将数组中指定区间的所有元素的值，都替换成某个固定的值。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.pop()")]),v._v(" 删除数组的最后一个元素，并返回这个元素。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.push(element..., elementN)")]),v._v(" 在数组的末尾增加一个或多个元素，并返回数组的新长度。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.reverse()")]),v._v(" 颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.shift()")]),v._v(" 删除数组的第一个元素，并返回这个元素。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.sort([compareFunction(firstEl,secondEl)])")]),v._v(" 对数组元素进行排序，并返回当前数组。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.splice(start[, deleteCount[, item, item, ...]]]])")]),v._v(" 在任意的位置给数组添加或删除任意个元素。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.unshift(element..., elementN)")]),v._v(" 在数组的开头增加一个或多个元素，并返回数组的新长度。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.concat(value, value, ...[, valueN]]])")]),v._v(" 返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.includes(valueToFind[, fromIndex])")]),v._v(" 判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.join([separator])")]),v._v(" 连接所有数组元素组成一个字符串。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.slice([begin[, end]])")]),v._v(" 抽取当前数组中的一段元素组合成一个新数组。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.toSource()")]),v._v(" 返回一个表示当前数组字面量的字符串。遮蔽了原型链上的 Object.prototype.toSource() 方法。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.toString()")]),v._v(" 返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.toLocaleString([locales[,options]])")]),v._v(" 返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.indexOf(searchElement[, fromIndex))")]),v._v(" 返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 --")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.lastIndexOf(searchElement[, fromIndex = arr.length)")]),v._v(" 返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 --")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.forEach(callback(element[, index[, array]])[, thisArg])")]),v._v(" 为数组中的每个元素执行一次回调函数。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.entries()")]),v._v(" 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.every(callback(element[, index[, array]])[, thisArg])")]),v._v(" 如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.some(callback(element[, index[, array]])[, thisArg])")]),v._v(" 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.filter(callback(element[, index[, array]])[, thisArg])")]),v._v(" 将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.find(callback(element[, index[, array]])[, thisArg])")]),v._v(" 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.findIndex(callback(element[, index[, array]])[, thisArg])")]),v._v(" 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 --")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.keys()")]),v._v(" 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.map(callback(element[, index[, array]])[, thisArg])")]),v._v(" 返回一个由回调函数的返回值组成的新数组。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])")]),v._v(" 从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue])")]),v._v(" 从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.values()")]),v._v(" 返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.copyWithin()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.entries()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.flat()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("Array.prototype.flatMap()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("ArrayFrom()")]),v._v(" "),e("code",[v._v("Array.from()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("ArrayIs()")]),v._v(" "),e("code",[v._v("Array.isArray()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("ArrayOf()")]),v._v(" "),e("code",[v._v("Array.of()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayConcat()")]),v._v(" "),e("code",[v._v("Array.prototype.concat()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayEvery()")]),v._v(" "),e("code",[v._v("Array.prototype.every()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayFill()")]),v._v(" "),e("code",[v._v("Array.prototype.fill()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayFilter()")]),v._v(" "),e("code",[v._v("Array.prototype.filter()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayFind()")]),v._v(" "),e("code",[v._v("Array.prototype.find()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayFindIndex()")]),v._v(" "),e("code",[v._v("Array.prototype.findIndex()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayForEach()")]),v._v(" "),e("code",[v._v("Array.prototype.forEach(callback(currentValue , index, array), thisArg)")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayIncludes()")]),v._v(" "),e("code",[v._v("Array.prototype.includes()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayIndexOf()")]),v._v(" "),e("code",[v._v("Array.prototype.indexOf()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayJoin()")]),v._v(" "),e("code",[v._v("Array.prototype.join()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayKeys()")]),v._v(" "),e("code",[v._v("Array.prototype.keys()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayLastIndexOf")]),v._v(" "),e("code",[v._v("Array.prototype.lastIndexOf()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayMap()")]),v._v(" "),e("code",[v._v("Array.prototype.map()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayPop()")]),v._v(" "),e("code",[v._v("Array.prototype.pop()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayPush()")]),v._v(" "),e("code",[v._v("Array.prototype.push()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayReduce()")]),v._v(" "),e("code",[v._v("Array.prototype.reduce()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayReduceRight()")]),v._v(" "),e("code",[v._v("Array.prototype.reduceRight()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayReverse()")]),v._v(" "),e("code",[v._v("Array.prototype.reverse()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayShift()")]),v._v(" "),e("code",[v._v("Array.prototype.shift()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arraySlice()")]),v._v(" "),e("code",[v._v("Array.prototype.slice()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arraySome()")]),v._v(" "),e("code",[v._v("Array.prototype.some()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arraySort()")]),v._v(" "),e("code",[v._v("Array.prototype.sort()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arraySplice()")]),v._v(" "),e("code",[v._v("Array.prototype.splice()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayUnshift()")]),v._v(" "),e("code",[v._v("Array.prototype.unshift()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("arrayValues")]),v._v(" "),e("code",[v._v("Array.prototype.values()")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("count(array, val = array )")]),v._v(" 统计数组中值出现的次数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("countBy(array, fn)")]),v._v(" 根据函数统计数组中值出现的次数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("deepCopyArray")]),v._v(" 深拷贝数组")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("duplicate(array)")]),v._v(" 返回数组中的重复值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("filterFalsy(array)")]),v._v(" 过滤虚假值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("flatten(array, depth)")]),v._v(" 展平数组到指定深度")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("head(array, n)")]),v._v(" 返回数组的前 n 个元素")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isArrayEvery(array, fn)")]),v._v(" 检测数组的所有元素是否都符合")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isArrayEveryEqual(array)")]),v._v(" 检测数组的所有元素是否相等")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isArrayNone(array, fn)")]),v._v(" 检测数组的所有元素是否都不符合")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isArraySome(array, fn)")]),v._v(" 检测数组的部分元素是否符合")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isArraySorted(array)")]),v._v(" 检测数组是否已排序。若为升序，返回 - 降序，返回-- 未排序，返回 -")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("offset(array, offset)")]),v._v(" 将指定数量的元素移动到数组的末尾。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("rest(array, n)")]),v._v(" 返回数组的后 n 个元素")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("reverse(array)")]),v._v(" 反转数组")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("unique(array)")]),v._v(" 返回数组中的所有不同值。去重；")])]),v._v(" "),e("h2",{attrs:{id:"boolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[v._v("#")]),v._v(" Boolean")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isFalse(boolean)")]),v._v(" 检测 false")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isTrue(boolean)")]),v._v(" 检测 true")])]),v._v(" "),e("h2",{attrs:{id:"date"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[v._v("#")]),v._v(" Date")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("date(...args)")]),v._v(" 创建 Date 对象")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("day(date)")]),v._v(" 月份中的第几天")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("dayOfWeek")]),v._v(" 周中的第几天")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("endofDay(date)")]),v._v(" 日期的最后一秒。- - -")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("firstDayofMonth(date)")]),v._v(" 日期所在月的第一天")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("format(date, fm)")]),v._v(" 格式化日期世界")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("hour(date)")]),v._v(" 日期的小时")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("lastDayofMonth(date)")]),v._v(" 日期所在月的最后一天")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("lastNDay(date)")]),v._v(" 日期前 N 天")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("millisecond(date)")]),v._v(" 日期的毫秒")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("minute(date)")]),v._v(" 日期的分钟")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("monday(date)")]),v._v(" 日期所在周的周一")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("month(date)")]),v._v(" 日期的月份")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nextDays(date, n)")]),v._v(" 指定日期后 N 天后")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nextHours(date, n)")]),v._v(" 指定日期的 N 时后")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nextMinutes(date, n)")]),v._v(" 指定日期的 N 分后")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nextMonths(date, n)")]),v._v(" 指定日期的 N 月后")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nextSeconds(date, n)")]),v._v(" 指定日期的 N 秒后")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nextWeeks(date, n)")]),v._v(" 指定日期的 N 周后")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nextYears(date, n)")]),v._v(" 指定日期的 N 年后")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("range")]),v._v(" 时间区段")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("second(date)")]),v._v(" 日期的秒")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("startofDay(date)")]),v._v(" 日期的第一秒。- - -")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("sunday(date)")]),v._v(" 日期所在周的周日")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("timeline(start, end)")]),v._v(" 返回起止时间中单位时间的连续时间数组")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("timestamp(date)")]),v._v(" 时间戳")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("tomorrow(date)")]),v._v(" 日期的后一天")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("weekofYear(date)")]),v._v(" 日期所在年份的周次")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("year(date)")]),v._v(" 日期的年份")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("yesterday(date)")]),v._v(" 日期的前一天")])]),v._v(" "),e("h2",{attrs:{id:"dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[v._v("#")]),v._v(" DOM")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isBottomVisible()")]),v._v(" 检测页面的底部是否可见")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isRoot()")]),v._v(" 检测文档根节点")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isVisibleinViewport(el)")]),v._v(" 检测元素在视区中是否可见")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("redirect(url)")]),v._v(" 重定向到指定 URL")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("scrollPosition")]),v._v(" 返回当前页的滚动位置")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("scrollToTop()")]),v._v(" 滚动至页面顶部")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("url()")]),v._v(" 返回当前 URL")])]),v._v(" "),e("h2",{attrs:{id:"function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[v._v("#")]),v._v(" Function")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("apply(thisArg, [argsArray])")]),v._v(" "),e("code",[v._v("Function.prototype.apply(thisArg, [argsArray])")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("bind(thisArg, ...args)")]),v._v(" "),e("code",[v._v("Function.prototype.bind(thisArg, ...args)")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("call(thisArg, ...args)")]),v._v(" "),e("code",[v._v("Function.prototype.call(thisArg, ...args)")])]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("ajax(option)")]),v._v(" 异步 JavaScript 和 XML")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("debounce()")]),v._v(" 防抖：触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("forEach(object, callback)")]),v._v(" 从左向右遍历对象")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("forEachRight(object, callback)")]),v._v(" 从右向左遍历对象")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("forEachRightArray(object, callback)")]),v._v(" 从右向左遍历数组")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("query()")]),v._v(" 元素选择器")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("queryAll()")]),v._v(" 元素选择器")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("swap(a, b)")]),v._v(" 交换两个元素的值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("throttle()")]),v._v(" 节流：高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("timeTaken(fn, ...args)")]),v._v(" 测量执行函数所用的时间")])]),v._v(" "),e("h2",{attrs:{id:"mobile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mobile"}},[v._v("#")]),v._v(" Mobile")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("mobileType()")]),v._v(" 返回手机系统类型。Android，IOS；")])]),v._v(" "),e("h2",{attrs:{id:"number"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[v._v("#")]),v._v(" Number")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("factorial(number)")]),v._v(" 阶乘。所有小于及等于该数的正整数的积，并且 - 的阶乘为 - 自然数 n 的阶乘写作 n!。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("euclideanAlgorithm(a, b)")]),v._v(" 欧几里得算法。指用于计算两个非负整数 a，b 的最大公约数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("areaofCircle(radius)")]),v._v(" 圆的面积")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("avg(...nums)")]),v._v(" 平均值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("collatz(number)")]),v._v(" Collatz 算法")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("digitize(num)")]),v._v(" 将数字转换为数字数组")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("distance(x1, y1, x2, y2)")]),v._v(" 两点间的距离")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("gcd(a, b)")]),v._v(" 计算两个数字之间最大的公共除数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isDivisible(dividend, divisor)")]),v._v(" 检测第一个数值是否可被另一个数值整除")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isEven(number)")]),v._v(" 检测偶数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isFinite(number)")]),v._v(" 检测无穷大")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isInteger(number)")]),v._v(" 检测整数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isLeapYear(number)")]),v._v(" 检测闰年")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isNaN(number)")]),v._v(" 检测非数值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isOdd(number)")]),v._v(" 检测奇数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isSafeInteger(number)")]),v._v(" 检测安全整数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("LeapYears(startYear, endYear)")]),v._v(" 返回范围内的所有闰年")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("max(...nums)")]),v._v(" 最大值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("min(...nums)")]),v._v(" 最小值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("PI()")]),v._v(" 圆周率")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("randomInteger(min, max = min)")]),v._v(" 随机整数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("randomNumber(min, max = min)")]),v._v(" 随机数值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("sum(...nums)")]),v._v(" 总值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("thousandsSeparator(num)")]),v._v(" 千位分隔符")])]),v._v(" "),e("h2",{attrs:{id:"object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[v._v("#")]),v._v(" Object")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("extend(target, parent)")]),v._v(" 混合属性到目标对象")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isArray(obj)")]),v._v(" 检测对象是否为数组")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isBoolean(obj)")]),v._v(" 检测对象是否为布尔值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isBrowser")]),v._v(" 检测浏览器环境")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isDate(obj)")]),v._v(" 检测对象是否为日期时间")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isDefined(obj)")]),v._v(" 检测已定义")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isDOM()")]),v._v(" 检测 DOM")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isEmpty(obj)")]),v._v(" 检测为空")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isFunction(obj)")]),v._v(" 检测函数")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isNull(obj)")]),v._v(" 检测 Null")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isNumber(obj)")]),v._v(" 检测数值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isObject(obj)")]),v._v(" 检测对象")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isPrimitive(obj)")]),v._v(" 检测原始数据类型。字符串、数值、布尔值、Symbol。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isRegExp(obj)")]),v._v(" 检测正则表达式")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isString(obj)")]),v._v(" 检测字符串")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isSymbol(obj)")]),v._v(" 检测 Symbol")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isUndefined(obj)")]),v._v(" 检测 Undefined")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("stringify(json)")]),v._v(" JSON 转字符串")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("typeOf(obj)")]),v._v(" 检测对象的数据类型")])]),v._v(" "),e("h2",{attrs:{id:"regexp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp"}},[v._v("#")]),v._v(" RegExp")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("regs()")]),v._v(" 常用正则表达式")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("verifyEmail()")]),v._v(" 验证邮箱")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("verifyNumber()")]),v._v(" 验证数值")])]),v._v(" "),e("h2",{attrs:{id:"string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[v._v("#")]),v._v(" String")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("capitalize()")]),v._v(" 将字符串的第一个字母大写")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("capitalizeEveryWord()")]),v._v(" 将字符串中每个单词的首字母大写")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("hexToRgba()")]),v._v(" hex 十六进制颜色转 rgb 颜色。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isPalindrome(string)")]),v._v(" 检测回文字符串")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isStringOfArray(string)")]),v._v(" 检测字符串数组")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isStringOfBoolean(string)")]),v._v(" 检测字符串布尔值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isStringOfNumber(string)")]),v._v(" 检测字符串数值")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("isValidParenthess()")]),v._v(" 检测是否是成对出现的括号。有效的括号；")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("longestWord(text)")]),v._v(" 返回一段话中最长的单词")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("nb()")]),v._v(" NB")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("randomString(length)array)")]),v._v(" 随机字符串")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("rate()")]),v._v(" 评分字符串星星")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("removeDuplicates(string)")]),v._v(" 移除字符串中所有相邻重复项")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("reverseString(string)")]),v._v(" 翻转字符串")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("rgbToHex()")]),v._v(" rgb 颜色转 hex 十六进制颜色。")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("sb()")]),v._v(" SB")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("toJson(string)")]),v._v(" 字符串转 JSON")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("urlParams([url = window.location.hr)")]),v._v(" 返回当前 URL 中的参数对象")]),v._v(" "),e("li",[e("code",[v._v("TODO")]),v._v(" "),e("code",[v._v("uuid()")]),v._v(" 通用唯一识别码（Universally Unique Identifier）")])]),v._v(" "),e("h2",{attrs:{id:"reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[v._v("#")]),v._v(" Reference")]),v._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.30secondsofcode.org/list",target:"_blank",rel:"noopener noreferrer"}},[v._v("30 seconds of code"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://www.lodashjs.com/docs/latest",target:"_blank",rel:"noopener noreferrer"}},[v._v("Lodash"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://underscorejs.org",target:"_blank",rel:"noopener noreferrer"}},[v._v("Underscore"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://chancejs.com/",target:"_blank",rel:"noopener noreferrer"}},[v._v("ChanceJS"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://collect.js.org",target:"_blank",rel:"noopener noreferrer"}},[v._v("CollectJS"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://date-fns.org/",target:"_blank",rel:"noopener noreferrer"}},[v._v("Date-fns"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://mathjs.org/",target:"_blank",rel:"noopener noreferrer"}},[v._v("MathJS"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"http://momentjs.cn/",target:"_blank",rel:"noopener noreferrer"}},[v._v("Moment"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=r.exports}}]);