(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{478:function(_,e,a){"use strict";a.r(e);var r=a(14),n=Object(r.a)({},(function(){var _=this,e=_.$createElement,a=_._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"function-langnang-package"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-langnang-package"}},[_._v("#")]),_._v(" Function @Langnang/{Package}")]),_._v(" "),a("h2",{attrs:{id:"algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[_._v("#")]),_._v(" Algorithm")]),_._v(" "),a("h3",{attrs:{id:"sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[_._v("#")]),_._v(" Sort")]),_._v(" "),a("p",[a("code",[_._v("bubble_sort(number_array)")]),_._v("冒泡排序\n"),a("code",[_._v("bucket_sort(number_array)")]),_._v("桶排序\n"),a("code",[_._v("counting_sort(number_array)")]),_._v("技术排序\n"),a("code",[_._v("heap_sort(number_array)")]),_._v("堆排序\n"),a("code",[_._v("insertion_sort(number_array)")]),_._v("插入排序\n"),a("code",[_._v("merge_sort(number_array)")]),_._v("归并排序\n"),a("code",[_._v("quick_sort(number_array)")]),_._v("快速排序\n"),a("code",[_._v("radix_sort(number_array)")]),_._v("基数排序\n"),a("code",[_._v("selection_sort(number_array)")]),_._v("选择排序\n"),a("code",[_._v("shell_sort(number_array)")]),_._v("希尔排序")]),_._v(" "),a("h2",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[_._v("#")]),_._v(" Array")]),_._v(" "),a("p",[a("code",[_._v("array.prototype.copy_within(target[, start[, end]])")]),_._v("在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。\n"),a("code",[_._v("array.prototype.entries()")]),_._v("返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。\n"),a("code",[_._v("array_count_by(array, fn)")]),_._v("根据函数统计数组中值出现的次数\n"),a("code",[_._v("array_every()")]),_._v(" "),a("code",[_._v("array_index_of(array, search_element[, from_index))")]),_._v("返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 --\n"),a("code",[_._v("array_last_index_of(array, search_element[, from_index = arr.length)")]),_._v("返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1\n"),a("code",[_._v("array_reverse()")]),_._v(" "),a("code",[_._v("array_sort([compare_function(first_el,second_el)])")]),_._v("对数组元素进行排序，并返回当前数组。\n"),a("code",[_._v("is_array_every(array, callback(element[, index[, array]])[, this_arg])")]),_._v("如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\n"),a("code",[_._v("is_array_every_equal(array)")]),_._v("检测数组的所有元素是否相等\n"),a("code",[_._v("is_array_none(array, fn)")]),_._v("检测数组的所有元素是否都不符合\n"),a("code",[_._v("is_array_some(array, fn)")]),_._v("检测数组的部分元素是否符合")]),_._v(" "),a("h2",{attrs:{id:"date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[_._v("#")]),_._v(" Date")]),_._v(" "),a("p",[a("code",[_._v("date(...args)")]),_._v("创建 _date 对象\n"),a("code",[_._v("day(date)")]),_._v("月份中的第几天\n"),a("code",[_._v("day_of_week")]),_._v("周中的第几天\n"),a("code",[_._v("endof_day(date)")]),_._v("日期的最后一秒。-\n"),a("code",[_._v("first_dayof_month(date)")]),_._v("日期所在月的第一天\n"),a("code",[_._v("format(date, fm)")]),_._v("格式化日期世界\n"),a("code",[_._v("last_dayof_month(date)")]),_._v("日期所在月的最后一天\n"),a("code",[_._v("last_n_day(date)")]),_._v("日期前 _n 天\n"),a("code",[_._v("monday(date)")]),_._v("日期所在周的周一\n"),a("code",[_._v("next_days(date, n)")]),_._v("指定日期后 _n 天后\n"),a("code",[_._v("next_hours(date, n)")]),_._v("指定日期的 _n 时后\n"),a("code",[_._v("next_minutes(date, n)")]),_._v("指定日期的 _n 分后\n"),a("code",[_._v("next_months(date, n)")]),_._v("指定日期的 _n 月后\n"),a("code",[_._v("next_seconds(date, n)")]),_._v("指定日期的 _n 秒后\n"),a("code",[_._v("next_weeks(date, n)")]),_._v("指定日期的 _n 周后\n"),a("code",[_._v("next_years(date, n)")]),_._v("指定日期的 _n 年后\n"),a("code",[_._v("range")]),_._v("时间区段\n"),a("code",[_._v("start_of_day(date)")]),_._v("日期的第一秒。-\n"),a("code",[_._v("sunday(date)")]),_._v("日期所在周的周日\n"),a("code",[_._v("timeline(start, end)")]),_._v("返回起止时间中单位时间的连续时间数组\n"),a("code",[_._v("tomorrow(date)")]),_._v("日期的后一天\n"),a("code",[_._v("yesterday(date)")]),_._v("日期的前一天")]),_._v(" "),a("h2",{attrs:{id:"dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[_._v("#")]),_._v(" DOM")]),_._v(" "),a("p",[a("code",[_._v("is_bottom_visible()")]),_._v("检测页面的底部是否可见\n"),a("code",[_._v("is_root()")]),_._v("检测文档根节点\n"),a("code",[_._v("is_visiblein_vie__wport(el)")]),_._v("检测元素在视区中是否可见\n"),a("code",[_._v("redirect(url)")]),_._v("重定向到指定 URL\n"),a("code",[_._v("scroll_position")]),_._v("返回当前页的滚动位置\n"),a("code",[_._v("scroll_to_top()")]),_._v("滚动至页面顶部\n"),a("code",[_._v("url()")]),_._v("返回当前 URL")]),_._v(" "),a("h2",{attrs:{id:"function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[_._v("#")]),_._v(" Function")]),_._v(" "),a("p",[a("code",[_._v("apply(this_arg, [args_array])``function.prototype.apply(this_arg, [args_array])")]),_._v(" "),a("code",[_._v("bind(this_arg, ...args)``function.prototype.bind(this_arg, ...args)")]),_._v(" "),a("code",[_._v("call(this_arg, ...args)``function.prototype.call(this_arg, ...args)")]),_._v(" "),a("code",[_._v("ajax(option)")]),_._v("异步 Java_script 和 X_m_l\n"),a("code",[_._v("debounce()")]),_._v("防抖触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间\n"),a("code",[_._v("for_each(object, callback)")]),_._v("从左向右遍历对象\n"),a("code",[_._v("for_each_right(object, callback)")]),_._v("从右向左遍历对象\n"),a("code",[_._v("for_each_right_array(object, callback)")]),_._v("从右向左遍历数组\n"),a("code",[_._v("query()")]),_._v("元素选择器\n"),a("code",[_._v("query_all()")]),_._v("元素选择器\n"),a("code",[_._v("s__wap(a, b)")]),_._v("交换两个元素的值\n"),a("code",[_._v("throttle()")]),_._v("节流高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率\n"),a("code",[_._v("time_taken(fn, ...args)")]),_._v("测量执行函数所用的时间\n"),a("code",[_._v("copy")]),_._v("拷贝，浅拷贝\n"),a("code",[_._v("deep_copy")]),_._v("深拷贝对象")]),_._v(" "),a("h2",{attrs:{id:"math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[_._v("#")]),_._v(" Math")]),_._v(" "),a("p",[a("code",[_._v("factorial(number)")]),_._v("阶乘。所有小于及等于该数的正整数的积，并且 的阶乘为 自然数 n 的阶乘写作 n!。\n"),a("code",[_._v("euclidean_algorithm(a, b)")]),_._v("欧几里得算法。指用于计算两个非负整数 a，b 的最大公约数\n"),a("code",[_._v("areaof_circle(radius)")]),_._v("圆的面积\n"),a("code",[_._v("collatz(number)")]),_._v("_collatz 算法\n"),a("code",[_._v("digitize(num)")]),_._v("将数字转换为数字数组\n"),a("code",[_._v("distance(x1, y1, x2, y2)")]),_._v("两点间的距离\n"),a("code",[_._v("gcd(a, b)")]),_._v("计算两个数字之间最大的公共除数\n"),a("code",[_._v("is_divisible(dividend, divisor)")]),_._v("检测第一个数值是否可被另一个数值整除\n"),a("code",[_._v("is_even(number)")]),_._v("检测偶数\n"),a("code",[_._v("is_finite(number)")]),_._v("检测无穷大\n"),a("code",[_._v("is_integer(number)")]),_._v("检测整数\n"),a("code",[_._v("is_leap_year(number)")]),_._v("检测闰年\n"),a("code",[_._v("is_na_n(number)")]),_._v("检测非数值\n"),a("code",[_._v("is_odd(number)")]),_._v("检测奇数\n"),a("code",[_._v("is_safe_integer(number)")]),_._v("检测安全整数\n"),a("code",[_._v("leap_years(start_year, end_year)")]),_._v("返回范围内的所有闰年\n"),a("code",[_._v("max(...nums)")]),_._v("最大值\n"),a("code",[_._v("min(...nums)")]),_._v("最小值\n"),a("code",[_._v("PI()")]),_._v("圆周率\n"),a("code",[_._v("random_int(max = 1, min = 0)")]),_._v("随机整数\n"),a("code",[_._v("random_float(max = 1, min = 0)")]),_._v("随机数值\n"),a("code",[_._v("sum(...nums)")]),_._v("总值\n"),a("code",[_._v("thousands_separator(num)")]),_._v("千位分隔符")]),_._v(" "),a("h2",{attrs:{id:"mobile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mobile"}},[_._v("#")]),_._v(" Mobile")]),_._v(" "),a("p",[a("code",[_._v("mobile_type()")]),_._v("返回手机系统类型。_android，_i_o_s；")]),_._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[_._v("#")]),_._v(" Number")]),_._v(" "),a("p",[a("code",[_._v("is_number(obj)")]),_._v("检测数值")]),_._v(" "),a("h2",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[_._v("#")]),_._v(" Object")]),_._v(" "),a("p",[a("code",[_._v("extend(target, parent)")]),_._v("混合属性到目标对象\n"),a("code",[_._v("is_bro_wser")]),_._v("检测浏览器环境\n"),a("code",[_._v("is_date(obj)")]),_._v("检测对象是否为日期时间\n"),a("code",[_._v("is_defined(obj)")]),_._v("检测对象是否已定义\n"),a("code",[_._v("is_dom()")]),_._v("检测对象是否是 DOM\n"),a("code",[_._v("is_function(obj)")]),_._v("检测对象是否是函数\n"),a("code",[_._v("is_object(obj)")]),_._v("检测对象\n"),a("code",[_._v("is_reg_exp(obj)")]),_._v("检测正则表达式\n"),a("code",[_._v("is_symbol(obj)")]),_._v("检测 Symbol\n"),a("code",[_._v("is_undefined(obj)")]),_._v("检测 Undefined\n"),a("code",[_._v("stringify(json)")]),_._v("JSON 转字符串")]),_._v(" "),a("h2",{attrs:{id:"regexp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp"}},[_._v("#")]),_._v(" RegExp")]),_._v(" "),a("p",[a("code",[_._v("regs()")]),_._v("常用正则表达式\n"),a("code",[_._v("verify_email()")]),_._v("验证邮箱\n"),a("code",[_._v("verify_number()")]),_._v("验证数值")]),_._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[_._v("#")]),_._v(" String")]),_._v(" "),a("p",[a("code",[_._v("capitalize()")]),_._v("将字符串的第一个字母大写\n"),a("code",[_._v("capitalize_every_word()")]),_._v("将字符串中每个单词的首字母大写\n"),a("code",[_._v("hex_to_rgba()")]),_._v("hex 十六进制颜色转 rgb 颜色。\n"),a("code",[_._v("is_palindrome(string)")]),_._v("检测回文字符串\n"),a("code",[_._v("is_string_of_array(string)")]),_._v("检测字符串数组\n"),a("code",[_._v("is_string_of_boolean(string)")]),_._v("检测字符串布尔值\n"),a("code",[_._v("is_string_of_number(string)")]),_._v("检测字符串数值\n"),a("code",[_._v("is_valid_parenthess()")]),_._v("检测是否是成对出现的括号。有效的括号；\n"),a("code",[_._v("longest___word(text)")]),_._v("返回一段话中最长的单词\n"),a("code",[_._v("nb()")]),_._v("_n_b\n"),a("code",[_._v("random_string(length)array)")]),_._v("随机字符串\n"),a("code",[_._v("rate()")]),_._v("评分字符串星星\n"),a("code",[_._v("remove_duplicates(string)")]),_._v("移除字符串中所有相邻重复项\n"),a("code",[_._v("string_reverse(string)")]),_._v("翻转字符串\n"),a("code",[_._v("rgb_to_hex()")]),_._v("rgb 颜色转 hex 十六进制颜色。\n"),a("code",[_._v("sb()")]),_._v("S_b\n"),a("code",[_._v("string_to_json(string)")]),_._v("字符串转 J_s_o_n\n"),a("code",[_._v("url_params([url = __windo__w.location.hr)")]),_._v("返回当前 _u_r_l 中的参数对象\n"),a("code",[_._v("uuid()")]),_._v("通用唯一识别码（_universally _unique _identifier）")])])}),[],!1,null,null,null);e.default=n.exports}}]);